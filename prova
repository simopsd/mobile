import React, { useState, createContext, useContext } from 'react';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import { NavigationContainer } from '@react-navigation/native';
import { View, Text, TextInput, Button, TouchableOpacity, StyleSheet } from 'react-native';
import DatePicker from '@react-native-community/datetimepicker'; // Importa il DatePicker dalla community


// Creazione del context degli eventi
const EventsContext = createContext();

const Statistiche = () => {
  return (
    <View>
      <Text>Statistics Screen</Text>
    </View>
  );
};

const GestisciEvento = () => {
  return (
    <View>
      <Text>Edit Screen</Text>
    </View>
  );
};

const Eventi = () => {
  const { events } = useContext(EventsContext);

  return (
    <View>
      <Text>Schermata Eventi</Text>
      {events.map((evento, index) => (
        <View key={index} style={styles.eventContainer}>
          <Text style={styles.eventTitle}>{evento.titolo}</Text>
          <Text style={styles.eventDate}>{evento.data.toDateString()}</Text>
          <Text style={styles.eventDescription}>{evento.descrizione}</Text>
        </View>
      ))}
    </View>
  );
};

const AggiungiEvento = ({ navigation }) => {
  const { addEvent } = useContext(EventsContext); // Ottenere la funzione per aggiungere un evento dal context
  const [titolo, setTitolo] = useState('');
  const [data, setData] = useState(new Date());
  const [descrizione, setDescrizione] = useState('');
  const [open, setOpen] = useState(false);

  const handleAggiungiEvento = () => {
    const nuovoEvento = { titolo, data, descrizione };
    addEvent(nuovoEvento); // Aggiungi l'evento utilizzando la funzione dal context
    navigation.goBack();
  };

  return (
    <View style={styles.container}>
      <Text style={styles.label}>Titolo:</Text>
      <TextInput
        style={styles.input}
        value={titolo}
        onChangeText={setTitolo}
        placeholder="Inserisci il titolo"
        placeholderTextColor="#888"
      />
      <Text style={styles.label}>Data:</Text>
      <TouchableOpacity onPress={() => setOpen(true)} style={styles.input}>
        <Text>{data.toDateString()}</Text>
      </TouchableOpacity>
  <DatePicker
  modal
  open={open}
  value={data} // Assicurati di passare correttamente il valore della data
  onConfirm={(date) => {
    setOpen(false);
    setData(date);
  }}
  onCancel={() => {
    setOpen(false);
  }}
/>
      <Text style={styles.label}>Descrizione:</Text>
      <TextInput
        style={[styles.input, styles.textArea]}
        value={descrizione}
        onChangeText={setDescrizione}
        placeholder="Inserisci la descrizione"
        placeholderTextColor="#888"
        multiline={true}
        numberOfLines={4}
      />
      <Button title="Aggiungi Evento" onPress={handleAggiungiEvento} />
    </View>
  );
};

const Dashboard = ({ navigation }) => {
  const { events } = useContext(EventsContext);

  return (
    <View style={{ flex: 1 }}>
      <Text style={styles.title}>Qui verranno mostrati tutti gli eventi</Text>
      {events.map((evento, index) => (
        <View key={index} style={styles.eventContainer}>
          <Text style={styles.eventTitle}>{evento.titolo}</Text>
          <Text style={styles.eventDate}>{evento.data.toDateString()}</Text>
          <Text style={styles.eventDescription}>{evento.descrizione}</Text>
        </View>
      ))}
      <TouchableOpacity
        style={styles.addButton}
        onPress={() => navigation.navigate('AggiungiEvento')}
      >
        <MaterialCommunityIcons name="plus" color="#fff" size={24} />
      </TouchableOpacity>
    </View>
  );
};

const Notifiche = () => {
  return (
    <View>
      <Text>Schermata Notifiche</Text>
    </View>
  );
};

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

const TabNavigator = () => {
  return (
    <Tab.Navigator
      initialRouteName="Dashboard"
      screenOptions={{
        tabBarActiveTintColor: '#6200ea',
        tabBarInactiveTintColor: 'gray',
        tabBarStyle: { backgroundColor: '#ffff' },
      }}
    >
      <Tab.Screen
        name="Dashboard"
        component={Dashboard}
        options={{
          tabBarLabel: 'Dashboard',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="view-dashboard" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Eventi"
        component={Eventi}
        options={{
          tabBarLabel: 'Eventi',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="calendar" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Modifica Evento"
        component={GestisciEvento}
        options={{
          tabBarLabel: 'Modifica',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="pencil" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Statistiche"
        component={Statistiche}
        options={{
          tabBarLabel: 'Statistiche',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="chart-bar" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Notifiche"
        component={Notifiche}
        options={{
          tabBarLabel: 'Notifiche',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="bell" color={color} size={size} />
          ),
          tabBarBadge: 3,
        }}
      />
    </Tab.Navigator>
  );
};

const App = () => {
  const [events, setEvents] = useState([]);

  const addEvent = (newEvent) => {
    setEvents([...events, newEvent]);
  };

  return (
    <EventsContext.Provider value={{ events, addEvent }}>
      <NavigationContainer>
        <Stack.Navigator>
          <Stack.Screen
            name="Main"
            component={TabNavigator}
            options={{ headerShown: false }}
          />
          <Stack.Screen
            name="AggiungiEvento"
            component={AggiungiEvento}
            options={{ title: 'Aggiungi Evento' }}
          />
        </Stack.Navigator>
      </NavigationContainer>
    </EventsContext.Provider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  label: {
    fontSize: 16,
    marginVertical: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 5,
    backgroundColor: '#fff',
    marginBottom: 12,
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    margin: 20,
  },
  addButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#6200ea',
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
  },
});


export default App;





